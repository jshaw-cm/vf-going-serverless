service:
  name: ${file(config.${opt:stage}.json):SERVICE_NAME}

package:
  exclude:
    - plugin/**
    - node_modules/**

custom:
  s3Sync:
    - bucketName: ${self:service}-files-${self:provider.stage}
      localDir: upload

plugins:
  - serverless-pseudo-parameters
  - serverless-s3-sync
  - invoke-after-deploy

provider:
  name: aws
  stage: ${opt:stage, 'local'}
  runtime: nodejs12.x
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${opt:region, 'us-east-1'}:#{AWS::AccountId}:table/${self:service}-foo-${self:provider.stage}
    - Effect: 'Allow'
      Action: 
        - s3:GetObject
      Resource: arn:aws:s3:::${self:service}-files-${self:provider.stage}*

environment: ${file(config.${self:provider.stage}.json)}

functions:
  writeFile:
    handler: app/dist/index.handler
    environment:
      BUCKET: ${self:service}-files-${self:provider.stage}
      TABLE: ${self:service}-foo-${self:provider.stage}
      INVOKE_AFTER_DEPLOY: true
      OBJECT_KEY: object.json

resources: # CloudFormation template syntax from here on.
  Resources:
    FooTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-foo-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FilesBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:service}-files-${self:provider.stage}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
